// services/payment.services.ts
import { VNPay, ignoreLogger, ProductCode, VnpLocale, dateFormat, VerifyReturnUrl } from 'vnpay'
import Payment, { IPayment } from '~/models/schemas/Payment.schema'
import Enrollment from '~/models/schemas/Enrollment.schema'
import Class from '~/models/schemas/Class.schema'
import Course from '~/models/schemas/Course.schema'
import mongoose from 'mongoose'

class PaymentService {
  private vnpay: VNPay

  constructor() {
    this.vnpay = new VNPay({
      tmnCode: process.env.VNP_TMN_CODE as string,
      secureSecret: process.env.VNP_HASHSECRET as string,
      vnpayHost: 'https://sandbox.vnpayment.vn',
      testMode: true,
      hashAlgorithm: 'SHA512',
      loggerFn: ignoreLogger
    })
  }

  /**
   * T·∫°o payment record v√† VNPay URL
   */
  async createPayment(payload: {
    userId: string
    courseId?: string // Course._id (optional - d√πng khi mua pre-recorded course tr·ª±c ti·∫øp)
    classId?: string // Class._id (required cho live-meet courses)
    amount: number
    orderInfo: string
    ipAddress: string
    returnUrl?: string
  }) {
    const session = await mongoose.startSession()
    session.startTransaction()

    try {
      let course: any
      let classInfo: any
      let totalSessions = 0
      let finalCourseId: string | undefined

      // 1. CASE 1: Mua qua Class (Live-meet courses)
      if (payload.classId) {
        // Validate classId format
        if (!mongoose.Types.ObjectId.isValid(payload.classId)) {
          throw new Error('Class ID kh√¥ng h·ª£p l·ªá')
        }

        // L·∫•y class info v√† populate courseId
        classInfo = await Class.findById(payload.classId).populate('courseId').session(session)

        if (!classInfo) {
          throw new Error('L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i')
        }

        // L·∫•y course t·ª´ populated data
        course = classInfo.courseId
        finalCourseId = course._id.toString()

        console.log('üìö Class Info:', {
          classId: classInfo._id,
          classCode: classInfo.classCode,
          courseId: course._id,
          courseTitle: course.title
        })

        // Ki·ªÉm tra l·ªõp c√≤n ch·ªó kh√¥ng
        if (classInfo.capacity.currentStudents >= classInfo.capacity.maxStudents) {
          throw new Error('L·ªõp h·ªçc ƒë√£ ƒë·∫ßy')
        }
      }
      // 2. CASE 2: Mua Course tr·ª±c ti·∫øp (Pre-recorded courses)
      else if (payload.courseId) {
        // Validate courseId format
        if (!mongoose.Types.ObjectId.isValid(payload.courseId)) {
          throw new Error('Course ID kh√¥ng h·ª£p l·ªá')
        }

        course = await Course.findById(payload.courseId).session(session)

        if (!course) {
          throw new Error('Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i')
        }

        finalCourseId = course._id.toString()

        // Pre-recorded course th∆∞·ªùng kh√¥ng c√≥ totalSessions c·ª• th·ªÉ
        // C√≥ th·ªÉ d√πng totalLessons thay v√¨ totalSessions
        totalSessions = course.courseStructure?.totalSessions || 0

        console.log('üìö Course Info:', {
          courseId: course._id,
          courseTitle: course.title,
          type: course.type,
          totalSessions
        })

        // Validate: Pre-recorded course kh√¥ng n√™n c√≥ classId
        if (course.type === 'live-meet') {
          throw new Error('Kh√≥a h·ªçc live-meet ph·∫£i ƒëƒÉng k√Ω qua l·ªõp h·ªçc (classId)')
        }
      }
      // 3. ERROR: C·∫ßn √≠t nh·∫•t courseId ho·∫∑c classId
      else {
        throw new Error('C·∫ßn cung c·∫•p courseId (pre-recorded) ho·∫∑c classId (live-meet)')
      }

      // 4. Ki·ªÉm tra user ƒë√£ ƒëƒÉng k√Ω ch∆∞a
      const enrollmentQuery: any = {
        studentId: new mongoose.Types.ObjectId(payload.userId),
        status: { $in: ['enrolled', 'completed'] }
      }

      // Query theo classId n·∫øu c√≥, n·∫øu kh√¥ng query theo courseId
      if (payload.classId) {
        enrollmentQuery.classId = new mongoose.Types.ObjectId(payload.classId)
      } else {
        enrollmentQuery.courseId = new mongoose.Types.ObjectId(finalCourseId!)
      }

      const existingEnrollment = await Enrollment.findOne(enrollmentQuery).session(session)

      if (existingEnrollment) {
        const errorMsg = payload.classId ? 'B·∫°n ƒë√£ ƒëƒÉng k√Ω l·ªõp h·ªçc n√†y r·ªìi' : 'B·∫°n ƒë√£ mua kh√≥a h·ªçc n√†y r·ªìi'
        throw new Error(errorMsg)
      }

      // 5. T·∫°o payment record
      const vnp_TxnRef = `PAY${Date.now()}${Math.floor(Math.random() * 1000)}`

      const paymentData: Partial<IPayment> = {
        userId: new mongoose.Types.ObjectId(payload.userId),
        // L∆∞u c·∫£ courseId v√† classId (n·∫øu c√≥)
        courseId: finalCourseId ? new mongoose.Types.ObjectId(finalCourseId) : undefined,
        classId: payload.classId ? new mongoose.Types.ObjectId(payload.classId) : undefined,
        amount: payload.amount,
        currency: 'VND',
        paymentMethod: 'vnpay',
        status: 'pending',
        orderInfo: payload.orderInfo,
        ipAddress: payload.ipAddress,
        returnUrl: payload.returnUrl || `${process.env.CLIENT_URL || 'http://localhost:3000'}/payment/result`,
        vnpay: {
          vnp_TxnRef
        }
      }

      console.log('üí≥ Creating payment:', {
        vnp_TxnRef,
        userId: payload.userId,
        courseId: finalCourseId,
        classId: payload.classId,
        amount: payload.amount
      })

      const payment = await Payment.create([paymentData], { session })

      // 6. Build VNPay payment URL
      const vnpayUrl = await this.vnpay.buildPaymentUrl({
        vnp_Amount: payload.amount, // VNPay amount (ƒë√£ nh√¢n 100 ·ªü controller)
        vnp_IpAddr: payload.ipAddress,
        vnp_TxnRef,
        vnp_OrderInfo: payload.orderInfo,
        vnp_OrderType: ProductCode.Other,
        vnp_Locale: VnpLocale.VN,
        vnp_CreateDate: dateFormat(new Date()),
        vnp_ReturnUrl: `${process.env.BACKEND_URL || 'http://localhost:4000'}/payment/vnpay/callback`
      })

      await session.commitTransaction()

      return {
        paymentId: payment[0]._id,
        vnpayUrl,
        vnp_TxnRef,
        courseInfo: {
          courseId: finalCourseId,
          courseTitle: course.title,
          classCode: classInfo?.classCode,
          totalSessions
        }
      }
    } catch (error) {
      await session.abortTransaction()
      console.error('‚ùå Create payment error:', error)
      throw error
    } finally {
      session.endSession()
    }
  }

  /**
   * X·ª≠ l√Ω callback t·ª´ VNPay
   */
  async handleVNPayCallback(query: VerifyReturnUrl) {
    const session = await mongoose.startSession()
    session.startTransaction()

    try {
      // 1. Verify signature t·ª´ VNPay
      const verify = this.vnpay.verifyReturnUrl(query)

      if (!verify.isVerified) {
        throw new Error('Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá - C√≥ th·ªÉ b·ªã t·∫•n c√¥ng')
      }

      const { vnp_TxnRef, vnp_ResponseCode, vnp_TransactionNo, vnp_BankCode, vnp_CardType, vnp_PayDate } = query

      console.log('üîî VNPay callback received:', {
        vnp_TxnRef,
        vnp_ResponseCode,
        vnp_TransactionNo,
        isVerified: verify.isVerified
      })

      // 2. T√¨m payment record
      const payment = await Payment.findOne({ 'vnpay.vnp_TxnRef': vnp_TxnRef }).session(session)

      if (!payment) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi TxnRef: ${vnp_TxnRef}`)
      }

      // Ki·ªÉm tra payment ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a (tr√°nh duplicate callback)
      if (payment.status === 'completed') {
        console.log('‚ö†Ô∏è Payment already processed:', payment._id)
        await session.commitTransaction()
        return {
          success: true,
          message: 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥',
          payment
        }
      }

      // 3. C·∫≠p nh·∫≠t payment v·ªõi th√¥ng tin t·ª´ VNPay
      payment.vnpay = {
        ...payment.vnpay,
        vnp_TransactionNo: vnp_TransactionNo as string,
        vnp_BankCode: vnp_BankCode as string,
        vnp_CardType: vnp_CardType as string,
        vnp_PayDate: vnp_PayDate ? new Date(this.parseVNPayDate(vnp_PayDate as string)) : undefined,
        vnp_ResponseCode: vnp_ResponseCode as string,
        vnp_SecureHash: query.vnp_SecureHash as string
      }

      // 4. X·ª≠ l√Ω theo response code
      if (vnp_ResponseCode === '00') {
        // ‚úÖ THANH TO√ÅN TH√ÄNH C√îNG
        payment.status = 'completed'
        payment.completedAt = new Date()

        console.log('‚úÖ Payment successful, creating enrollment...')

        // 5. T·∫°o enrollment
        let finalCourseId = payment.courseId

        // N·∫øu thanh to√°n qua classId, l·∫•y courseId t·ª´ class
        if (payment.classId && !finalCourseId) {
          const classInfo = await Class.findById(payment.classId).session(session)
          if (classInfo) {
            finalCourseId = classInfo.courseId as any
          }
        }

        const enrollmentData: any = {
          studentId: payment.userId,
          courseId: finalCourseId,
          classId: payment.classId,
          enrollmentDate: new Date(),
          status: 'enrolled',
          progress: {
            sessionsAttended: 0,
            totalSessions: 0
          },
          paymentStatus: 'paid',
          paymentInfo: {
            amount: payment.amount,
            paymentDate: new Date(),
            transactionId: vnp_TransactionNo as string
          }
        }

        // T√≠nh totalSessions v√† update counters
        if (payment.classId) {
          // CASE: ƒêƒÉng k√Ω qua Class (live-meet)
          const classInfo = await Class.findById(payment.classId).session(session)

          if (classInfo) {
            // T√≠nh totalSessions
            const startDate = new Date(classInfo.schedule.startDate)
            const endDate = classInfo.schedule.endDate
              ? new Date(classInfo.schedule.endDate)
              : new Date(startDate.getTime() + (classInfo.schedule.durationWeeks || 0) * 7 * 24 * 60 * 60 * 1000)

            const totalWeeks = Math.ceil((endDate.getTime() - startDate.getTime()) / (7 * 24 * 60 * 60 * 1000))
            enrollmentData.progress.totalSessions = totalWeeks * classInfo.schedule.days.length

            // TƒÉng currentStudents trong Class
            await Class.findByIdAndUpdate(
              payment.classId,
              {
                $inc: { 'capacity.currentStudents': 1 }
              },
              { session }
            )

            console.log('üìà Updated class:', {
              classId: payment.classId,
              newCurrentStudents: classInfo.capacity.currentStudents + 1
            })
          }
        } else if (payment.courseId) {
          // CASE: Mua course tr·ª±c ti·∫øp (pre-recorded)
          const course = await Course.findById(payment.courseId).session(session)

          if (course) {
            enrollmentData.progress.totalSessions = course.courseStructure?.totalSessions || 0

            // TƒÉng studentsCount trong Course
            await Course.findByIdAndUpdate(
              payment.courseId,
              {
                $inc: { studentsCount: 1 }
              },
              { session }
            )

            console.log('üìà Updated course:', {
              courseId: payment.courseId,
              newStudentsCount: (course.studentsCount || 0) + 1
            })
          }
        }

        // T·∫°o enrollment record
        const enrollment = await Enrollment.create([enrollmentData], { session })
        payment.enrollmentId = enrollment[0]._id

        console.log('üéì Enrollment created:', {
          enrollmentId: enrollment[0]._id,
          studentId: payment.userId,
          courseId: finalCourseId,
          classId: payment.classId
        })

        await payment.save({ session })
        await session.commitTransaction()

        return {
          success: true,
          message: 'Thanh to√°n th√†nh c√¥ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω v√†o kh√≥a h·ªçc.',
          payment,
          enrollment: enrollment[0]
        }
      } else {
        // ‚ùå THANH TO√ÅN TH·∫§T B·∫†I
        payment.status = 'failed'
        payment.errorMessage = this.getVNPayErrorMessage(vnp_ResponseCode as string)

        console.log('‚ùå Payment failed:', {
          code: vnp_ResponseCode,
          message: payment.errorMessage
        })

        await payment.save({ session })
        await session.commitTransaction()

        return {
          success: false,
          message: payment.errorMessage,
          payment
        }
      }
    } catch (error) {
      await session.abortTransaction()
      console.error('‚ùå VNPay callback error:', error)
      throw error
    } finally {
      session.endSession()
    }
  }

  /**
   * L·∫•y l·ªãch s·ª≠ thanh to√°n c·ªßa user
   */
  async getPaymentHistory(
    userId: string,
    options?: {
      status?: string
      page?: number
      limit?: number
    }
  ) {
    const { status, page = 1, limit = 10 } = options || {}
    const skip = (page - 1) * limit

    const filter: any = { userId: new mongoose.Types.ObjectId(userId) }
    if (status) {
      filter.status = status
    }

    const [payments, total] = await Promise.all([
      Payment.find(filter)
        .populate('courseId', 'title price level type')
        .populate('classId', 'classCode schedule')
        .populate('enrollmentId', 'status progress')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .lean(),
      Payment.countDocuments(filter)
    ])

    return {
      payments,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
        itemsPerPage: limit
      }
    }
  }

  /**
   * Ki·ªÉm tra quy·ªÅn truy c·∫≠p course
   */
  async checkCourseAccess(userId: string, courseId: string) {
    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(courseId)) {
      throw new Error('Invalid user ID or course ID')
    }

    const enrollment = await Enrollment.findOne({
      studentId: new mongoose.Types.ObjectId(userId),
      courseId: new mongoose.Types.ObjectId(courseId),
      status: { $in: ['enrolled', 'completed'] },
      paymentStatus: 'paid'
    })
      .populate('courseId', 'title type')
      .lean()

    return {
      hasAccess: !!enrollment,
      enrollment
    }
  }

  /**
   * Ki·ªÉm tra quy·ªÅn truy c·∫≠p class
   */
  async checkClassAccess(userId: string, classId: string) {
    if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(classId)) {
      throw new Error('Invalid user ID or class ID')
    }

    const enrollment = await Enrollment.findOne({
      studentId: new mongoose.Types.ObjectId(userId),
      classId: new mongoose.Types.ObjectId(classId),
      status: { $in: ['enrolled', 'completed'] },
      paymentStatus: 'paid'
    })
      .populate('classId', 'classCode schedule')
      .populate('courseId', 'title')
      .lean()

    return {
      hasAccess: !!enrollment,
      enrollment
    }
  }

  // Helper methods
  private parseVNPayDate(dateString: string): Date {
    // Format: YYYYMMDDHHmmss
    const year = parseInt(dateString.substring(0, 4))
    const month = parseInt(dateString.substring(4, 6)) - 1
    const day = parseInt(dateString.substring(6, 8))
    const hour = parseInt(dateString.substring(8, 10))
    const minute = parseInt(dateString.substring(10, 12))
    const second = parseInt(dateString.substring(12, 14))

    return new Date(year, month, day, hour, minute, second)
  }

  private getVNPayErrorMessage(code: string): string {
    const errorMessages: Record<string, string> = {
      '07': 'Giao d·ªãch nghi ng·ªù gian l·∫≠n',
      '09': 'Th·∫ª ch∆∞a ƒëƒÉng k√Ω Internet Banking',
      '10': 'X√°c th·ª±c th√¥ng tin th·∫ª kh√¥ng ƒë√∫ng qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
      '11': 'ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n',
      '12': 'Th·∫ª b·ªã kh√≥a',
      '13': 'Nh·∫≠p sai m·∫≠t kh·∫©u qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
      '24': 'Kh√°ch h√†ng h·ªßy giao d·ªãch',
      '51': 'T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞',
      '65': 'T√†i kho·∫£n ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch',
      '75': 'Ng√¢n h√†ng ƒëang b·∫£o tr√¨',
      '79': 'Nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
      '99': 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
    }

    return errorMessages[code] || 'Giao d·ªãch th·∫•t b·∫°i'
  }
}

export default new PaymentService()
